JavaScript(ES6)を学ぼう
  このレッスンでは、JavaScriptの新しいバージョンであるES6の基本的なコードの書き方について学んでいきます。
  １つ１つ丁寧に学んでいきますので、最後まで頑張っていきましょう！

  参考画像：JavaScript01_image_1.jpg


JavaScript(ES6)とは
  JavaScript（以下、jsと呼びます）はWeb開発において必須の存在です。
  現在では、ほぼ全てのWebサイトでjsが使用されています。
  今回学習するES2015(ES6)は、jsの新しい仕様（バージョン）で、
  従来のjsより効率的にコードが書けることから近年注目を浴びています。

  参考画像：JavaScript01_image_2.jpg


プログラムを実行してみよう
  まずは、ES6のコードを実行してみましょう。コンソールという画面に文字を出力（表示）します。
  「console.log("〇〇");」というコードを書くと、()の中の〇〇という文字がコンソールに出力されます。

  参考画像：JavaScript01_image_3.jpg


console.log()
  コードの書き方をより詳しく見ていきましょう。console.log()は丸括弧（）内に入力された文字をコンソールに出力します。
  また「Hello World」のような文字のことを文字列と呼びます。文字列は、左の図のように
  シングルクォーテーション（'）かダブルクォーテーション（"）で囲む必要があるので注意しましょう。

  参考画像：JavaScript01_image_4.jpg


セミコロン
  文の最後はセミコロン（；）で終わります。セミコロンはなくても正常に動作する場合が多いですが、
  思わぬ不具合が生じる可能性があるので忘れずにつけましょう。

  参考画像：JavaScript01_image_5.jpg


コメントアウト
  文頭に「//」を書くと、その行はコメントとみなされます。そのため、プログラムとしては無視され、
  実行されません。（コメントアウトと言います）コメントは、どのような意味のコードであるかを示すメモとして使われます。

  参考画像：JavaScript01_image_6.jpg


数値と計算
  プログラミングでは、数値（数字）を扱うこともできます。数値は文字列と違いクォーテーションで囲みません。
  数値は足し算や引き算といった計算もすることができます。足し算には「+」、引き算には「-」の記号を用います。
  数値と記号はすべて半角で記述することに注意しましょう。

  参考画像：JavaScript01_image_7.jpg


文字列と数値
  左の図のように、console.log(5 + 2);は足し算の結果である7が出力されます。
  一方、「5 + 2」にクォーテーションをつけると、文字列と解釈されそのまま出力されます。
  文字列と数値は明確に違うものであることを意識しましょう。

  参考画像：JavaScript01_image_8.jpg


掛け算「*」、割り算「/」
  足し算・引き算以外の計算の方法も学んでみましょう。
  左の図のように、掛け算は「*」（アスタリスク）、割り算「/」（スラッシュ）
  という記号を用いて計算することができます。これらの記号は一般的な算数で
  用いるものと少し違うので、しっかり覚えましょう。

  参考画像：JavaScript01_image_9.jpg


あまりの計算「%」
  さらに、「%」記号を使うと、割ったときの余りを求めることができます。
  プログラミングでは余りの計算を使う機会がよくありますので、
  しっかりと覚えておきましょう。

  参考画像：JavaScript01_image_10.jpg


文字列の連結
  「+」記号を用いると、文字列同士を連結することができます。左の図のように、
  「"にんじゃ" + "わんこ"」とすると、「"にんじゃわんこ"」という１つの文字列になります。

  参考画像：JavaScript01_image_11.jpg


文字列と数値の違い
  ここでも文字列と数値の違いを確認しましょう。
  "3" + "5"は「"35"」という文字列になりますが、3 + 5は「8」になります。
  「文字列と数値は別物」ということをしっかり意識しましょう。

  参考画像：JavaScript01_image_12.jpg


変数とは
  ここからは変数について学習します。
  変数は、データ（値）の入れ物（箱）です。箱についている名前が「変数名」であり、
  箱の中に実際の値（文字列や数値など）が入っています。
  具体的な使い方は次のスライドで見てみましょう。

  参考画像：JavaScript01_image_13.jpg


変数の定義
  変数は「let 変数名 = 値」として定義します。プログラミングの「=」は「等しい」という意味ではなく、
  「右辺を左辺に代入する」という意味です。
  「let」は「これから変数を定義します」という宣言で、その後ろに変数名を書き、値を代入します。

  参考画像：JavaScript01_image_14.jpg

変数の使い方
  変数の使い方は簡単です。左の図のように「"John"」という値が代入された変数nameを出力すると、
  右の図のように「"John"」という値が出力されます。
  中央の図で示されているように、変数を使うと変数の部分は代入した値に置き換わります。

  参考画像：JavaScript01_image_15.jpg


変数と文字列
  これまで見てきたように、変数はクォーテーションで囲みません。
  「console.log("name");」のように変数名をクォーテーションで囲むと、
  nameが変数ではなく「文字列」として認識され、「name」とそのまま出力されてしまうので注意しましょう。

  参考画像：JavaScript01_image_16.jpg


変数の特徴
  変数は、これまでに学習してきた「文字列」や「数値」とまったく同じように扱えます。
  代入されている値が、文字列の場合はほかの文字列と連結することができ、数値の場合は計算に用いることができます。

  参考画像：JavaScript01_image_17.jpg


なぜ変数を使うのか
  実際のプログラムの中には多くの値が登場します。プログラムを書くときはそれらの値を間違いのないように、
  そして値の変更に対応しやすいようにすることが求められます。それを助けるための１つの仕組みが変数です。
  変数には以下のようなメリットがあります。

  参考画像：JavaScript01_image_18.jpg


変数のメリット
  「同じ値を繰り返し使える」「変更に対応しやすい」という具体例を見てみましょう。
  左の図のように似た文章を何度も書くのは面倒ですが、変数を使えば同じ値を繰り返し使え、
  楽にコードを書くことができます。また文章が後ほど変更されても、変数を用いていれば、
  代入する値を変更するだけですべての変更に対応できます。

  参考画像：JavaScript01_image_19.jpg


変数の命名ルール
  変数名（変数の名前）は自由に決めることができますが、できるだけわかりやすい名前を付けるようにしましょう。
  また、ES6では変数の名前にいくつかのルールがあります。以下の図を参考に、適切な変数名を付けるように意識しましょう。

  参考画像：JavaScript01_image_20.jpg


変数の更新
  変数は、一度代入した値を変更することもできます。一度値を代入した変数に、
  その後再び値を代入すると、後に代入した値で変数の中身が上書きされます。
  定義するときと違って「let」は必要なく、「変数名 = 新しい値」と書けば
  値が変更されます。

  参考画像：JavaScript01_image_21.jpg


変数の更新のイメージ
  下の図で変数の更新のイメージを見てみましょう。
  プログラムは上から順に実行されるので、後で代入された値で変数の中身が更新されます。

  参考画像：JavaScript01_image_22.jpg


変数自身を更新する
  既に定義している変数numberの値に3を足したい、というときはどのようにすればよいでしょうか。
  これは左の図のようにnumberに3に足して、再びnumberに代入することで実現できます。
  「=」の右側のnumberは値に置き換わり、計算された結果が、左のnumberに代入されています。

  参考画像：JavaScript01_image_23.jpg

変数自身に代入するイメージ
  変数を変数自身を使って更新する場合も、イメージ図で確認しておきましょう。

  参考画像：JavaScript01_image_24.jpg


省略した書き方
  「number = number + 10」といった書き方には、省略した書き方もあります。
  よく使いますので、下の図をぜひ覚えましょう。

  参考画像：JavaScript01_image_25.jpg


定数とは
  変数とよく似たものに、定数があります。定数はletの代わりにconstを用いて定義します。
  変数と定数の違いについて、次のスライドを見ていきましょう。

  参考画像：JavaScript01_image_26.jpg


定数と変数の違い
  変数と定数の違いを見てみましょう。
  左の図のように、変数は1度代入した値を更新することができましたが、定数は値を更新することはできません。
  右の図のように定数の値を更新しようとすると、コードを実行した際にエラーが発生してしまうので気をつけましょう。

  参考画像：JavaScript01_image_27.jpg


定数を使うメリット
  定数のメリットは、「後から値を更新できない」ところにあります。
  これは一見不便に感じるかもしれません。ですが、予期せぬ更新を防ぐことができ、
  より安全なコードを書くことができます。これはコードの量が増えるにつれて徐々にメリットとして感じると思います。
  今後のProgateの演習では、基本的に変数ではなく定数を使っていきます。

  参考画像：JavaScript01_image_28.jpg


テンプレートリテラル
  これまで文字列や定数の連結には、「+」記号を用いてきました。
  ES6では、それ以外の方法として「テンプレートリテラル」という連結方法があります。
  テンプレートリテラルを用いると、下の図のように文字列の中に定数（変数）を
  埋め込むことができます。詳しい書き方は次のスライドを見ていきましょう。

  参考画像：JavaScript01_image_29.jpg

テンプレートリテラルの書き方
  左の図のように、文字列の中で「${定数}」とすることで、文字列の中に定数や変数を含めることができます。
  この時、文字列全体をバッククォーテーション（`）で囲む必要があります。
  また、右の図のように複数の変数や定数を埋め込むことも可能です。

  参考画像：JavaScript01_image_30.jpg


バッククォーテーションの書き方（PCの場合）
  バッククォーテーションは左の図のように入力します。
  USキー（アメリカなどで使用されているキーボード）と
  JISキー（日本のキーボード）によって入力方法が異なるので注意してください。

  参考画像：JavaScript01_image_31.jpg


条件分岐
  次に、プログラミングにおいて重要な条件分岐について学びましょう。
  プログラミングを学んでいると「ある条件が成り立つときだけある処理を行う」
  という場面が出てきます。このようなプログラムを条件分岐と言います。

  参考画像：JavaScript01_image_32.jpg

if文の書き方
  if文を用いると「もし〇〇ならば●●を行う」という条件分岐が可能になります。
  ifの後ろに条件式を書き、それが「成り立つ」場合の処理を{}の中に書きます。
  下の図でif文の書き方のイメージを掴みましょう。

  参考画像：JavaScript01_image_33.jpg

if文のコード
  実際のコードを見てみましょう。
  まず左の図は条件式の一例です。「number > 10」の部分は「定数numberの値が10より大きい」
  という意味の条件になります。
  定数numberには12が代入されているので、この条件は成り立ち、処理が実行されています。

  参考画像：JavaScript01_image_34.jpg


if文を書くときのポイント
  if文を書くときは、インデントをするようにしましょう。
  インデントとは日本語で「字下げ」を意味します。きれいにインデントすると
  コードが見やすくなります。下図のようにインデントを入れることでifの処理が
  どこからか一目でわかります。
  tabキーを押すと、インデントすることができます。

  参考画像：JavaScript01_image_35.jpg


条件式の出力
  if文を使うことができました。次は条件式の部分を詳しく見てみましょう。
  右の図のように、先ほどのif文の条件式の部分を出力してみると、
  「true」が出力されています。このtrueとは一体なんでしょうか？

  参考画像：JavaScript01_image_36.jpg


真偽値
  先ほどの例で出力された「true」は真偽値と呼ばれるものです。真偽値には
  trueとfalseという2つの値しか存在しません。条件式は、成り立つと
  「true」、成り立たなければ「false」という真偽値に置き換わります。
  よって下の図のように条件式を出力してみると、trueやfalseが出力されています。

  参考画像：JavaScript01_image_37.jpg


if文と真偽値
  前のスライドで、条件式は真偽値で置き換えられることがわかりました。
  このことから、if文は条件式がtrueであれば処理が実行され、falseであれば
  実行されないということがわかります。
  if文の条件式がtrueの処理の流れを、下の図で確認しておきましょう。

  参考画像：JavaScript01_image_38.jpg